import React, { useEffect, useState } from "react";
// import Circle from "../assets/Circle.png";
// import Arrow from "../assets/Arrow.png";
import Html from "../assets/Html.png";
import Css from "../assets/Css.png";
import Reacts from "../assets/React.png";
import Js from "../assets/Js.png";
import Node from "../assets/Node.png";
import Prisma from "../assets/Prisma.png";
import Tailwind from "../assets/Tailwind.png";
import Figma from "../assets/Figma.png";
import Git from "../assets/Git.png";
import Sql from "../assets/Sql.png";
import Postman from "../assets/Postman.png";
import Render from "../assets/Render.png";
// import { motion } from "framer-motion";

// const skills = [
//   { src: Render, label: "Render" },
//   { src: Sql, label: "My SQL" },
//   { src: Git, label: "Git" },
//   { src: Node, label: "Node JS" },
//   { src: Prisma, label: "Prisma" },
//   { src: Tailwind, label: "Tailwind" },
//   { src: Css, label: "CSS" },
//   { src: Html, label: "HTML" },
//   { src: Figma, label: "Figma" },
//   { src: Js, label: "JavaScript" },
//   { src: Reacts, label: "React" },
//   { src: Postman, label: "Postman" },
// ];

// export default function Skills() {
//   const [show, setShow] = useState(false);
//   const [windowWidth, setWindowWidth] = useState(window.innerWidth);

//   // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î radius ‡πÅ‡∏ö‡∏ö Responsive
//   let radius = 250;
//   if (windowWidth < 768) {
//     // ‡πÑ‡∏°‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mobile ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ Grid
//     radius = 150;
//   } else if (windowWidth < 1024) {
//     // Tablet/Small Desktop
//     radius = 200;
//   } else {
//     // Large Desktop
//     radius = 250;
//   }

//   const center = { x: radius, y: radius };
//   const totalSkills = skills.length;

//   // * Effect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Scroll ‡πÅ‡∏•‡∏∞ Window Resize
//   useEffect(() => {
//     const handleResize = () => setWindowWidth(window.innerWidth);

//     window.addEventListener("scroll", handleScroll);
//     window.addEventListener("resize", handleResize);

//     return () => {
//       window.removeEventListener("scroll", handleScroll);
//       window.removeEventListener("resize", handleResize);
//     };
//   }, []);

//   const handleScroll = () => {
//     const scrollY = window.scrollY;
//     // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ scrollY ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 900 ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
//     if (scrollY > 900) {
//       setShow(true);
//     } else {
//       setShow(false);
//     }
//   };

//   return (
//     <motion.div
//       initial={{ opacity: 0 }}
//       animate={{ opacity: show ? 1 : 0 }}
//       transition={{ duration: 0.9 }}
//       className="p-4 sm:p-8" // ‡πÄ‡∏û‡∏¥‡πà‡∏° Padding ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
//     >
//       <div>
//         <div className="text-center font-bold text-4xl sm:text-5xl mx-auto py-8 mb-12">
//           Skills üõ†Ô∏è
//         </div>

//         {/*
//           ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: Circular Layout (Desktop/Tablet)
//         */}
//         <div className="relative mx-auto flex justify-center">
//           <div
//             className="hidden md:block relative"
//             style={{
//               width: `${radius * 2}px`,
//               height: `${radius * 2}px`,
//               margin: "auto",
//             }}
//           >
//             {/* Arrow/Circle Background */}
//             <img
//               src={Arrow}
//               alt="Circle Background"
//               className="absolute top-0 left-0 w-full h-full animate-spin-slow opacity-50"
//               style={{ animationDuration: '30s' }} // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô
//             />

//             {/* Skill Icons in Circle */}
//             {skills.map((skill, index) => {
//               const angle = (index / totalSkills) * 2 * Math.PI;
//               // ‡∏•‡∏ö 50 (‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ô‡∏≤‡∏î skill icon 100px) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏∏‡∏î
//               const x = center.x + radius * Math.cos(angle) - 50;
//               const y = center.y + radius * Math.sin(angle) - 50;

//               return (
//                 <div
//                   key={index}
//                   className="absolute"
//                   style={{
//                     top: `${y}px`,
//                     left: `${x}px`,
//                     width: "100px",
//                     height: "100px",
//                   }}
//                 >
//                   <div className="relative z-10 flex flex-col items-center justify-center p-2 bg-white rounded-lg shadow-xl
//                     transition duration-300 transform hover:scale-105 hover:bg-gray-50 border-b-4 border-transparent hover:border-pink-500">
//                     <img
//                       src={skill.src}
//                       alt={skill.label}
//                       className="w-[60px] h-[60px] object-contain" // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
//                     />
//                     <span className="text-center mt-1 text-sm font-semibold text-gray-700">
//                       {skill.label}
//                     </span>
//                   </div>
//                 </div>
//               );
//             })}
//           </div>
//         </div>

//         {/*
//           ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: Grid Layout (Mobile/Small Screen)
//         */}
//         <div className="md:hidden max-w-lg mx-auto p-4">
//           <div className="grid grid-cols-3 sm:grid-cols-4 gap-4">
//             {skills.map((skill, index) => (
//               <div
//                 key={index}
//                 className="relative z-10 flex flex-col items-center justify-center p-2 bg-white rounded-lg shadow-md border-2 border-gray-100
//                   transition duration-300 transform hover:scale-105 hover:bg-gray-50 hover:border-pink-500"
//               >
//                 <img
//                   src={skill.src}
//                   alt={skill.label}
//                   className="w-[50px] h-[50px] sm:w-[60px] sm:h-[60px] object-contain"
//                 />
//                 <span className="text-center mt-1 text-xs sm:text-sm font-semibold text-gray-700">
//                   {skill.label}
//                 </span>
//               </div>
//             ))}
//           </div>
//         </div>
//       </div>
//     </motion.div>
//   );
// }

// import React, { useEffect, useState } from "react";
// Import paths have been simplified for this environment (Placeholders used for assets)
// const Arrow = "https://placehold.co/500x500/000000/ffffff?text=Arrow+Ring";
// const Html = Html;
// const Css = Css;
// const Reacts = Reacts;
// const Js = Js;
// const Node =Node;
// const Prisma = Prisma;
// const Tailwind = Tailwind;
// const Figma = Figma;
// const Git = Git;
// const Sql = Sql;
// const Postman = Postman;
// const Render = Render;

// (Framer Motion ‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ)

const skills = [
  { src: Render, label: "Render" },
  { src: Sql, label: "My SQL" },
  { src: Git, label: "Git" },
  { src: Node, label: "Node JS" },
  { src: Prisma, label: "Prisma" },
  { src: Tailwind, label: "Tailwind" },
  { src: Css, label: "CSS" },
  { src: Html, label: "HTML" },
  { src: Figma, label: "Figma" },
  { src: Js, label: "JavaScript" },
  { src: Reacts, label: "React" },
  { src: Postman, label: "Postman" },
];

// ‡∏•‡∏ö Keyframe ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏≠‡∏≠‡∏Å ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏∏‡∏ô‡πÅ‡∏•‡πâ‡∏ß
const NO_ANIMATION_KEYFRAMES = `
  .animate-spin-slow, .animate-spin-reverse {
    animation: none !important;
  }
`;

// ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà 'Skills' ‡∏î‡πâ‡∏ß‡∏¢ 'App' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Canvas ‡πÑ‡∏î‡πâ
export default function App() {
  const [show, setShow] = useState(false);
  const [windowWidth, setWindowWidth] = useState(window.innerWidth);

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î radius ‡πÅ‡∏ö‡∏ö Responsive
  let radius = 250;
  if (windowWidth < 768) {
    radius = 120; // ‡∏•‡∏î radius ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mobile
  } else if (windowWidth < 1024) {
    radius = 200;
  } else {
    radius = 250;
  }

  const totalSkills = skills.length;
  // ‡∏õ‡∏£‡∏±‡∏ö center: ‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÄ‡∏™‡∏°‡∏∑‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
  const center = { x: radius * 1.5, y: radius * 0.9 }; // ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠

  // * Effect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Scroll ‡πÅ‡∏•‡∏∞ Window Resize
  useEffect(() => {
    const handleResize = () => setWindowWidth(window.innerWidth);

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ initial scroll position
    const handleScroll = () => {
      const scrollY = window.scrollY;
      if (scrollY > 500) {
        setShow(true);
      } else {
        setShow(false);
      }
    };

    window.addEventListener("scroll", handleScroll);
    window.addEventListener("resize", handleResize);
    handleScroll();

    return () => {
      window.removeEventListener("scroll", handleScroll);
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  return (
    <div className=" pt-20 font-sans">
      {/* ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤ */}
      <style>{NO_ANIMATION_KEYFRAMES}</style>
      <p className="font-bold text-5xl mb-24 text-center">Skill</p>

      {/* ‡πÉ‡∏ä‡πâ opacity ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÅ‡∏ó‡∏ô Framer Motion */}
      <div
        style={{ opacity: show ? 1 : 0, transition: "opacity 0.9s" }}
        className="p-4 sm:p-8"
      >
        {/*
          ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: Semi-Circular Layout (Desktop/Tablet)
        */}
        <div className="relative mx-auto flex justify-center items-center">
          <div
            className="hidden md:block relative" // ‡πÉ‡∏ä‡πâ overflow-hidden ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡πà‡∏≠‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏≠‡∏ö
            style={{
              width: `${radius * 3}px`, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡πÇ‡∏Ñ‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
              height: `${radius * 2}px`, // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
              margin: "auto",
            }}
          >
            {/* Image/Skill Icons in Semi-Circle */}
            {skills.map((skill, index) => {
              // 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏á‡∏®‡∏≤: 0 ‡∏ñ‡∏∂‡∏á Math.PI (180 ‡∏≠‡∏á‡∏®‡∏≤)
              const startAngle = Math.PI; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 180 ‡∏≠‡∏á‡∏®‡∏≤ (‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á)
              const endAngle = 0; // ‡∏à‡∏ö‡∏ó‡∏µ‡πà 0 ‡∏≠‡∏á‡∏®‡∏≤ (‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô)
              const angleRange = startAngle - endAngle;

              // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏á‡∏®‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ item
              const angle =
                startAngle - (index / (totalSkills - 1)) * angleRange;

              // 2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß)
              // Center X ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 1.5*radius ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡πà‡∏ß‡∏ô‡πÇ‡∏Ñ‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á 3*radius
              const x = center.x + radius * Math.cos(angle) - 50;
              const y = center.y - radius * Math.sin(angle) - 50; // ‡πÉ‡∏ä‡πâ -sin() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏á‡∏´‡∏á‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô

              return (
                <div
                  key={index}
                  className="absolute group z-10"
                  style={{
                    top: `${y}px`,
                    left: `${x}px`,
                    width: "100px",
                    height: "100px",
                    transition:
                      "transform 0.3s ease-out, box-shadow 0.3s ease-out",
                  }}
                >
                  <div
                    className="relative flex flex-col items-center justify-center rounded-2xl shadow-xl overflow-hidden 
                    w-full h-full transform transition duration-300 group-hover:scale-[1.3] group-hover:shadow-2xl group-hover:shadow-pink-500/50"
                  >
                    {/* ‡∏†‡∏≤‡∏û Skill (‡πÉ‡∏ä‡πâ Placeholder Image ‡πÅ‡∏ó‡∏ô) */}
                    <img
                      src={skill.src}
                      alt={skill.label}
                      className="w-full h-full object-cover rounded-2xl"
                    />
                    {/* Overlay ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ (‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ) */}
                    <div className="absolute inset-0 bg-black/40 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                      <span className="text-sm font-bold text-white text-center p-1">
                        {skill.label}
                      </span>
                    </div>
                  </div>
                </div>
              );
            })}

            {/* ‡∏õ‡∏∏‡πà‡∏° Navigation ‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤ (‡∏à‡∏≥‡∏•‡∏≠‡∏á) */}
            <button className="absolute right-0 top-1/2 transform -translate-y-1/2 p-4 bg-gray-800 hover:bg-gray-700 text-white rounded-full shadow-lg transition duration-300 z-20">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M9 5l7 7-7 7"
                />
              </svg>
            </button>
            <button className="absolute left-0 top-1/2 transform -translate-y-1/2 p-4 bg-gray-800 hover:bg-gray-700 text-white rounded-full shadow-lg transition duration-300 z-20">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M15 19l-7-7 7-7"
                />
              </svg>
            </button>
          </div>
        </div>

        {/*
          ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: Grid Layout (Mobile/Small Screen) - ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô
        */}
        <div className="md:hidden max-w-lg mx-auto p-4 mt-12">
          <h3 className="text-xl font-bold  mb-4 text-center">
            All Skills (Grid View)
          </h3>
          <div className="grid grid-cols-4 sm:grid-cols-4 gap-4">
            {skills.map((skill, index) => (
              <div
                key={index}
                className="relative z-10 flex flex-col items-center justify-center p-2   rounded-lg shadow-md border-2 border-pink-700
                  transition duration-300 transform hover:scale-105 hover:bg-yellow-300 hover:border-pink-500"
              >
                <img
                  src={skill.src}
                  alt={skill.label}
                  className="w-[50px] h-[50px] sm:w-[60px] sm:h-[60px] object-contain"
                />
                <span className="text-center mt-1 text-xs sm:text-sm font-semibold">
                  {skill.label}
                </span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
